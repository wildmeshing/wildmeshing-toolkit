
#pragma once
// DO NOT MODIFY, autogenerated from the /scripts directory
#include <Eigen/Core>
#include <cassert>
#include <wmtk/PrimitiveType.hpp>
#include <wmtk/Types.hpp>
#include <array>

namespace wmtk::autogen::point_mesh {
class SimplexDart
{
public:
    SimplexDart();

    static int8_t product(int8_t a, int8_t b)
    {
        assert(a == 0 && b == 0);
        return 0;
    }
    static int8_t inverse(int8_t a) { return 0; }
    static int8_t primitive_to_index(wmtk::PrimitiveType) { return 0; }
    static int8_t identity() { return 0; }
    constexpr static size_t size() { return 1; }

    const static std::array<int8_t, 1> _indices;
    static auto valid_indices() { return Vector<int8_t, 1>::ConstMapType(_indices.data()); }
    static auto valid_indices_dynamic() { return VectorX<int8_t>::ConstMapType(_indices.data(), size()); }

    // constexpr static Eigen::Map<const Eigen::Matrix<int8_t, SimplexDart::size(), 1>>
    // constexpr static auto valid_indices()
    //{
    //    return Vector<int8_t,return sizeof(auto_valid_tuple_indices) / sizeof(int8_t); }
    //           {auto_valid_tuple_indices};
    //}
};

} // namespace wmtk::autogen::point_mesh
