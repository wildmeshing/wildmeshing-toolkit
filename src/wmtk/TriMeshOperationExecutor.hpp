#pragma once
#include <wmtk/operations/tri_mesh/EdgeOperationData.hpp>
#include <wmtk/utils/Logger.hpp>
#include "SimplicialComplex.hpp"
#include "TriMesh.hpp"
#include "Tuple.hpp"
namespace wmtk {


class TriMesh::TriMeshOperationExecutor : public operations::tri_mesh::EdgeOperationData
{
public:
    TriMeshOperationExecutor(TriMesh& m, const Tuple& operating_tuple, Accessor<long>& hash_acc);
    void delete_simplices();
    void update_cell_hash();

    std::array<Accessor<char>, 3> flag_accessors;
    Accessor<long> ff_accessor;
    Accessor<long> fe_accessor;
    Accessor<long> fv_accessor;
    Accessor<long> vf_accessor;
    Accessor<long> ef_accessor;
    Accessor<long>& hash_accessor;


    /**
     * @brief gather all simplices that are deleted in a split
     *
     * The deleted simplices are exactly the open star of the edge
     */
    static const std::array<std::vector<long>, 3> get_split_simplices_to_delete(
        const Tuple& tuple,
        const TriMesh& m);

    /**
     * @brief gather all simplices that are deleted in a collapse
     *
     * The deleted simplices are the intersection of the open star of the vertex and the closed star
     * of the edge. This comes down to one vertex, three edges, and two faces if the edge is on the
     * interior. On the boundary it is one vertex, two edges, and one face.
     */
    static const std::array<std::vector<long>, 3> get_collapse_simplices_to_delete(
        const Tuple& tuple,
        const TriMesh& m);


    void update_ids_in_ear(
        const long ear_fid,
        const long new_fid,
        const long old_fid,
        const long new_eid);

    void connect_ears();

    void split_edge();
    void collapse_edge();
    void split_edge_single_mesh();
    void collapse_edge_single_mesh();

    /**
     * @brief
     *
     * @param new_fids_top the two new fids on the top sides of AB generated by split_edge(AB)
     * @param new_fids_bottom the two new fids on the bottom sides of AB generated by split_edge(AB)
     */
    // return the two new fids in order
    void replace_incident_face(
        const long new_vid,
        const std::vector<long>& spine_eids,
        IncidentFaceData& face_data);
    void connect_faces_across_spine();
    std::vector<long> request_simplex_indices(const PrimitiveType type, long count);

    TriMesh& m_mesh;

    std::vector<std::vector<Tuple>> prepare_operating_tuples_for_child_meshes() const;
    void update_hash_in_map(TriMesh& child_mesh);


    IncidentFaceData get_incident_face_data(Tuple t);
};

} // namespace wmtk
