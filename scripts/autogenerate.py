#!/usr/bin/env python3
import jinja2
import os



# expects a path of the form "path/to/location/name.{}pp"
# data should be a dictionary containing a namespace entry and a list of
# dictionaries called "tables" that contains the "name" and the "data". "data"
# should be list of lists or longs
# example:
# array_data = {
#         "namespace": "tri_mesh",
#         "tables": [
#             {
#                 "name": "test",
#                 "data": [[4,5,6],[2,3,4]]
#             },
#             {
#                 "name": "test2",
#                 "data": [4,5,6]
#             }
#         ]
#     }

def autogenerate(path_format, data):
    environment = jinja2.Environment(loader=jinja2.FileSystemLoader("./"))


    # deal with rare cases where the data passed in is a set internally?
    def to_list_or_int(dat):
        if type(dat) is int:
            return dat
        else:
            return list(map(to_list_or_int,dat))

    for table_dict in data["tables"]:
        table_dict["data"] = to_list_or_int(table_dict["data"])
        # convert table dict data to be lists

    data["local_header_path"] = os.path.basename(path_format.format("h"))

    def write(char,template):

        with open(path_format.format(char),"w") as hpp_file:
            hpp_file.write(template.render(data))
    cpp_template = environment.get_template("autogenerated_tables.cpp.template")
    write("c",cpp_template)

    hpp_template = environment.get_template("autogenerated_tables.hpp.template")
    write("h",hpp_template)






if __name__ == "__main__":
    array_data = {
            "namespace": "tri_mesh",
            "tables": [
                {
                    "name": "test",
                    "data": [[4,5,6],[2,3,4]]
                },
                {
                    "name": "test2",
                    "data": {4,5,6}
                }
            ]
        }

    autogenerate("/tmp/test.{}pp", array_data)
