name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux
  ####################

  Linux:
    name: ${{ matrix.name }} (${{ matrix.config }})
    runs-on: [self-hosted,Linux]
    #runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        config: [Debug, Release]
        include:
          - os: ubuntu-latest
            name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies
        run: |
          echo 'CACHE_PATH=~/.ccache' >> "$GITHUB_ENV"

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.tbb }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.tbb }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=20.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cd build; make -j8; ccache --show-stats

      - name: Tests
        run: cd build; ctest --verbose --output-on-failure

  ####################
  # MacOS
  ####################

  MacOS:
    name: ${{ matrix.name }}-${{ matrix.arch }} (${{ matrix.config }})
    #runs-on: ${{ matrix.os }}
    runs-on: [self-hosted, MacOS]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        arch: [arm64] # arm64 no arm as GMP is binary
        config: [Debug, Release]
        include:
          - os: macos-latest
            name: macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies
        run: |
          echo 'CACHE_PATH=~/Library/Caches/ccache' >> "$GITHUB_ENV"

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.arch }}-${{ matrix.tbb }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.arch }}-${{ matrix.tbb }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=20.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cd build; make -j8; ccache --show-stats

      - name: Tests
        #if: matrix.arch == 'x86_64' # no ARM vm on actions yet
        run: cd build; ctest --verbose --output-on-failure

  ####################
  # Windows
  ####################

  Windows:
    name: Windows (${{ matrix.config }})
    runs-on: [self-hosted, Windows]
    #runs-on: windows-2022
    env:
      CC: cl.exe
      CXX: cl.exe
      SCCACHE_IDLE_TIMEOUT: "12000"
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Configure and build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake --version
          cmake -G Ninja ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cd build
          ninja -j8

      - name: Tests
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=x64
          cd build
          ctest --verbose --output-on-failure
