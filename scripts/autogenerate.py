#!/usr/bin/env python3
import jinja2
import os



# expects a path of the form "path/to/location/name.{}pp"
# data should be a dictionary containing a namespace entry and a list of
# dictionaries called "tables" that contains the "name" and the "data". "data"
# should be list of lists or longs
# example:
# array_data = {
#         "namespace": "tri_mesh",
#         "tables": [
#             {
#                 "name": "test",
#                 "data": [[4,5,6],[2,3,4]]
#             },
#             {
#                 "name": "test2",
#                 "data": [4,5,6]
#             }
#         ]
#     }

def autogenerate(files, data, use_clang_format = False, clang_format_binary = "clang-format", autogen_path="../src/wmtk/autogen/"):
    environment = jinja2.Environment(loader=jinja2.FileSystemLoader("./"))


    # deal with rare cases where the data passed in is a set internally?
    def to_list_or_int(dat):
        if type(dat) is int:
            return dat
        else:
            return list(map(to_list_or_int,dat))

    for table_dict in data["tables"]:
        table_dict["data"] = to_list_or_int(table_dict["data"])
        # convert table dict data to be lists



    def write(path, template):
        with open(path,"w") as file:
            file.write(template.render(data))
            if use_clang_format:
                import subprocess
                try:
                    subprocess.Popen([clang_format_binary,"-i",path])
                except FileNotFoundError:
                    print("Warning: autogenerate failed to run clang-format due to FileNotFoundError - please make sure the autogenerated files are properly formatted before committing them")
                
    for file in files:
        data["filename"] = file
        for extension in ("hpp","cpp","hxx"):
            output_filename = f"{file}.{extension}"
            template_path = os.path.join("templates",output_filename + ".template")
            if os.path.exists(template_path):
                template = environment.get_template(template_path)
                output_path = os.path.join(autogen_path, data["namespace"], output_filename)
                write(output_path, template)
        





if __name__ == "__main__":
    array_data = {
            "namespace": "tri_mesh",
            "tables": [
                {
                    "name": "test",
                    "data": [[4,5,6],[2,3,4]]
                },
                {
                    "name": "test2",
                    "data": {4,5,6}
                }
            ]
        }

    autogenerate(["autogenerated_tables"], array_data, autogen_path="/tmp")
