#pragma once
// DO NOT MODIFY, autogenerated from the /scripts directory
#include <Eigen/Core>
#include <wmtk/PrimitiveType.hpp>
#include <wmtk/Types.hpp>
#include <wmtk/utils/array_to_map.hpp>
#include "autogenerated_tables.hpp"

namespace wmtk::autogen::{{ namespace }} {
class SimplexDart
{
public:
    SimplexDart();

    static int8_t product(int8_t a, int8_t b) { return auto_valid_switch_product_table[b][a]; }
    static int8_t inverse(int8_t a) { return auto_valid_switch_inverse_table[a]; }
    static int8_t primitive_to_index(wmtk::PrimitiveType pt)
    {
        return auto_valid_tuple_switch_indices[get_primitive_type_id(pt)];
    }
    static int8_t identity() { return primitive_to_index(wmtk::PrimitiveType::{{ type }} ); }
    constexpr static size_t size() { return sizeof(auto_valid_tuple_indices) / sizeof(int8_t); }

    static auto valid_indices() { return wmtk::utils::array_to_map(auto_valid_tuple_indices); }
    static auto valid_indices_dynamic()
    {
        return VectorX<int8_t>::ConstMapType(auto_valid_tuple_indices, size());
    }

    // constexpr static Eigen::Map<const Eigen::Matrix<int8_t, SimplexDart::size(), 1>>
    // constexpr static auto valid_indices()
    //{
    //    return Vector<int8_t,return sizeof(auto_valid_tuple_indices) / sizeof(int8_t); }
    //           {auto_valid_tuple_indices};
    //}
};

}

